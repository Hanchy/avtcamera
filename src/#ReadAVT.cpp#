#include <iostream>
#include <vector>
#include <string>
#include <thread>
#include <chrono>

#include <csignal>


#include <opencv2/opencv.hpp>
#include "ApiController.h"
#include "Common/ErrorCodeToMessage.h"

#include "FindCorners.h"

static bool stop = false;
void sigIntHandler(int signal) {
  stop = true;
}



int main(int argc, char **argv) {

  std::signal(SIGINT, sigIntHandler);

  AVT::VmbAPI::ApiController avt_sys;

  VmbErrorType err;

  if (VmbErrorSuccess != avt_sys.StartUp()) {
    std::cerr << "avt_cam.StartUp() failed!\n";
    return -1;
  }

  avt_sys.InitializeCameras();
  std::cout << "InitializeCameras" << std::endl;

  std::cout << avt_sys.m_pCameras.size() << std::endl;

  AVTCamera &cam = avt_sys.m_pCameras[0];
  err = cam.Open();
  if (VmbErrorSuccess != err)
    std::cerr << avt_sys.ErrorCodeToMessage(err) << std::endl;

  err = cam.LoadSettings("/home/fans/Vimba_2_0/bgr8.xml");
  err = cam.StartContinuousImageAcquisition();
  if (VmbErrorSuccess != err ) {
    std::cerr << avt_sys.ErrorCodeToMessage(err) << std::endl;
    return -1;
  }

#if 1

  std::this_thread::sleep_for(std::chrono::milliseconds(10));
  
  int image_width = cam.GetWidth();
  int image_height = cam.GetHeight();
  cv::Mat gray(image_height, image_width, CV_8UC1);

  cv::Scalar RED = cv::Scalar(0, 0, 255);
  
  while (!stop) {

    VmbUchar_t *pImageBuffer = NULL;
    VmbErrorType res = cam.GetRawImage(pImageBuffer);
    if (VmbErrorSuccess != res)
      continue;

    cv::Mat bgr(image_height, image_width, CV_8UC3, (void *)pImageBuffer);

    cv::cvtColor(bgr, gray, CV_BGR2GRAY);
    //
    std::vector<cv::Point2f> corners;
    find_corners(gray, corners);
    //std::cout << "corners size: " << corners.size() << std::endl;
    //
    std::for_each(corners.begin(), corners.end(),
                  [&](cv::Point2f &pt){cv::circle(bgr, pt, 2, RED, -1);});
    //
    
    cv::imshow("mat", bgr);
    cv::waitKey(10);
  }
#endif
  cam.StopContinuousImageAcquisition();
  cam.ClearFrameQueue();
  cam.Close();

  avt_sys.ShutDown();
  
  return 0;
}
